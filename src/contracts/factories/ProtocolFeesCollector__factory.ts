/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProtocolFeesCollector,
  ProtocolFeesCollectorInterface,
} from "../ProtocolFeesCollector";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "SwapFeePercentageChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getActionId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getCollectedFeeAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "feeAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSwapFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "setSwapFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawCollectedFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610aa8380380610aa883398101604081905261002f9161004d565b30608052600160005560601b6001600160601b03191660a05261007b565b60006020828403121561005e578081fd5b81516001600160a01b0381168114610074578182fd5b9392505050565b60805160a05160601c610a026100a66000398061036852806104595250806102035250610a026000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806338e9922e1461007257806355c67628146100875780636daefab6146100a5578063851c1bb3146100b8578063aaabadc5146100cb578063e42abf35146100e0578063fbfa77cf14610100575b600080fd5b610085610080366004610877565b610108565b005b61008f610167565b60405161009c9190610969565b60405180910390f35b6100856100b33660046106c6565b61016d565b61008f6100c6366004610817565b6101ff565b6100d3610251565b60405161009c91906108f8565b6100f36100ee366004610746565b610260565b60405161009c9190610925565b6100d3610366565b61011061038a565b6101276706f05b59d3b200008211156102586103bb565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc9061015c908390610969565b60405180910390a150565b60015490565b6101756103cd565b61017d61038a565b61018784836103e6565b60005b848110156101ef5760008686838181106101a057fe5b90506020020160208101906101b5919061085b565b905060008585848181106101c557fe5b602002919091013591506101e590506001600160a01b03831685836103f3565b505060010161018a565b506101f861044e565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102349291906108a7565b604051602081830303815290604052805190602001209050919050565b600061025b610455565b905090565b606081516001600160401b038111801561027957600080fd5b506040519080825280602002602001820160405280156102a3578160200160208202803683370190505b50905060005b8251811015610360578281815181106102be57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102f191906108f8565b60206040518083038186803b15801561030957600080fd5b505afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610341919061088f565b82828151811061034d57fe5b60209081029190910101526001016102a9565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103a16000356001600160e01b0319166101ff565b90506103b86103b082336104e8565b6101916103bb565b50565b816103c9576103c98161057a565b5050565b6103df600260005414156101906103bb565b6002600055565b6103c981831460676103bb565b6104498363a9059cbb60e01b848460405160240161041292919061090c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526105cd565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b057600080fd5b505afa1580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b919061083f565b60006104f2610455565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b815260040161052193929190610972565b60206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057191906107f0565b90505b92915050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006060836001600160a01b0316836040516105e991906108bf565b6000604051808303816000865af19150503d8060008114610626576040519150601f19603f3d011682016040523d82523d6000602084013e61062b565b606091505b50915091506000821415610643573d6000803e3d6000fd5b61066d81516000148061066557508180602001905181019061066591906107f0565b6101a26103bb565b50505050565b60008083601f840112610684578182fd5b5081356001600160401b0381111561069a578182fd5b60208301915083602080830285010111156106b457600080fd5b9250929050565b8035610574816109b7565b6000806000806000606086880312156106dd578081fd5b85356001600160401b03808211156106f3578283fd5b6106ff89838a01610673565b90975095506020880135915080821115610717578283fd5b5061072488828901610673565b9094509250506040860135610738816109b7565b809150509295509295909350565b60006020808385031215610758578182fd5b82356001600160401b038082111561076e578384fd5b818501915085601f830112610781578384fd5b81358181111561078f578485fd5b838102915061079f848301610991565b8181528481019084860184860187018a10156107b9578788fd5b8795505b838610156107e3576107cf8a826106bb565b8352600195909501949186019186016107bd565b5098975050505050505050565b600060208284031215610801578081fd5b81518015158114610810578182fd5b9392505050565b600060208284031215610828578081fd5b81356001600160e01b031981168114610810578182fd5b600060208284031215610850578081fd5b8151610810816109b7565b60006020828403121561086c578081fd5b8135610810816109b7565b600060208284031215610888578081fd5b5035919050565b6000602082840312156108a0578081fd5b5051919050565b9182526001600160e01b031916602082015260240190565b60008251815b818110156108df57602081860181015185830152016108c5565b818111156108ed5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561095d57835183529284019291840191600101610941565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b6040518181016001600160401b03811182821017156109af57600080fd5b604052919050565b6001600160a01b03811681146103b857600080fdfea2646970667358221220798075d28e81f5c4128669f9d741f1934b69902c80cd107c5d082b0c7065299f64736f6c63430007010033";

export class ProtocolFeesCollector__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProtocolFeesCollector> {
    return super.deploy(
      _vault,
      overrides || {}
    ) as Promise<ProtocolFeesCollector>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): ProtocolFeesCollector {
    return super.attach(address) as ProtocolFeesCollector;
  }
  connect(signer: Signer): ProtocolFeesCollector__factory {
    return super.connect(signer) as ProtocolFeesCollector__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolFeesCollectorInterface {
    return new utils.Interface(_abi) as ProtocolFeesCollectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProtocolFeesCollector {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProtocolFeesCollector;
  }
}
